{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAwD;AAGxD;;;;GAIG;AACH,mBAAmB,MAAc;IAAE,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,6BAAc;;IAC/C,IAAM,GAAG,GAAG,mBAAa,EAAE,CAAC;IAC5B,IAAI,GAAG,IAAI,GAAG,CAAC,MAAmB,CAAC,EAAE;QAClC,GAAG,CAAC,MAAmB,CAAC,OAAxB,GAAG,WAAiC,IAAI,GAAE;KAC5C;AACH,CAAC;AAED;;;;GAIG;AACH,0BAAiC,SAAc;IAC7C,SAAS,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;AAC3C,CAAC;AAFD,4CAEC;AAED;;;;GAIG;AACH,wBAA+B,OAAe;IAC5C,SAAS,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;AACvC,CAAC;AAFD,wCAEC;AAED;;;;GAIG;AACH,sBAA6B,KAAkB;IAC7C,SAAS,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;AACnC,CAAC;AAFD,oCAEC;AAED;;;;;;;GAOG;AACH,uBAA8B,UAAsB;IAClD,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;AACzC,CAAC;AAFD,sCAEC;AAED;;;GAGG;AACH,wBAA+B,QAAgC;IAC7D,SAAS,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AACxC,CAAC;AAFD,wCAEC;AAED;;;;;;;;GAQG;AACH,uBAA8B,MAAc;IAAE,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,6BAAc;;IAC1D,SAAS,yBAAC,cAAc,EAAE,MAAM,GAAK,IAAI,GAAE;AAC7C,CAAC;AAFD,sCAEC","sourcesContent":["import { getDefaultHub, Hub, Scope } from '@sentry/hub';\nimport { Breadcrumb, SentryEvent } from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\nfunction callOnHub(method: string, ...args: any[]): void {\n  const hub = getDefaultHub();\n  if (hub && hub[method as keyof Hub]) {\n    (hub[method as keyof Hub] as any)(...args);\n  }\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n */\nexport function captureException(exception: any): void {\n  callOnHub('captureException', exception);\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n */\nexport function captureMessage(message: string): void {\n  callOnHub('captureMessage', message);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n */\nexport function captureEvent(event: SentryEvent): void {\n  callOnHub('captureEvent', event);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub('configureScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n */\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub('invokeClient', method, ...args);\n}\n"]}