{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAwBA,WAAW;AACX,IAAY,QAeX;AAfD,WAAY,QAAQ;IAClB,WAAW;IACX,2BAAe,CAAA;IACf,WAAW;IACX,2BAAe,CAAA;IACf,WAAW;IACX,+BAAmB,CAAA;IACnB,WAAW;IACX,uBAAW,CAAA;IACX,WAAW;IACX,yBAAa,CAAA;IACb,WAAW;IACX,2BAAe,CAAA;IACf,WAAW;IACX,iCAAqB,CAAA;AACvB,CAAC,EAfW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAenB;AAgJD,8BAA8B;AAC9B,IAAY,MAaX;AAbD,WAAY,MAAM;IAChB,0CAA0C;IAC1C,6BAAmB,CAAA;IACnB,+DAA+D;IAC/D,6BAAmB,CAAA;IACnB,iDAAiD;IACjD,6BAAmB,CAAA;IACnB,qEAAqE;IACrE,kCAAwB,CAAA;IACxB,wCAAwC;IACxC,6BAAmB,CAAA;IACnB,qDAAqD;IACrD,2BAAiB,CAAA;AACnB,CAAC,EAbW,MAAM,GAAN,cAAM,KAAN,cAAM,QAajB;AAED,uDAAuD;AACvD,WAAiB,MAAM;IACrB;;;;;OAKG;IACH,sBAA6B,IAAY;QACvC,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,EAAE;YAC7B,OAAO,MAAM,CAAC,OAAO,CAAC;SACvB;QAED,IAAI,IAAI,KAAK,GAAG,EAAE;YAChB,OAAO,MAAM,CAAC,SAAS,CAAC;SACzB;QAED,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,EAAE;YAC7B,OAAO,MAAM,CAAC,OAAO,CAAC;SACvB;QAED,IAAI,IAAI,IAAI,GAAG,EAAE;YACf,OAAO,MAAM,CAAC,MAAM,CAAC;SACtB;QAED,OAAO,MAAM,CAAC,OAAO,CAAC;IACxB,CAAC;IAlBe,mBAAY,eAkB3B,CAAA;AACH,CAAC,EA1BgB,MAAM,GAAN,cAAM,KAAN,cAAM,QA0BtB","sourcesContent":["/** Supported Sentry transport protocols in a DSN. */\nexport type DSNProtocol = 'http' | 'https';\n\n/** Primitive components of a DSN. */\nexport interface DSNComponents {\n  /** Protocol used to connect to Sentry. */\n  protocol: DSNProtocol;\n  /** Public authorization key. */\n  user: string;\n  /** Private authorization key (deprecated, optional). */\n  pass?: string;\n  /** Hostname of the Sentry instance. */\n  host: string;\n  /** Port of the Sentry instance. */\n  port?: string;\n  /** Sub path/ */\n  path?: string;\n  /** Project ID */\n  projectId: string;\n}\n\n/** Anything that can be parsed into a DSN. */\nexport type DSNLike = string | DSNComponents;\n\n/** TODO */\nexport enum Severity {\n  /** TODO */\n  Fatal = 'fatal',\n  /** TODO */\n  Error = 'error',\n  /** TODO */\n  Warning = 'warning',\n  /** TODO */\n  Log = 'log',\n  /** TODO */\n  Info = 'info',\n  /** TODO */\n  Debug = 'debug',\n  /** TODO */\n  Critical = 'critical',\n}\n\n/** TODO */\nexport interface Breadcrumb {\n  type?: string;\n  level?: Severity;\n  event_id?: string;\n  category?: string;\n  message?: string;\n  data?: any;\n  timestamp?: number;\n}\n\n/** TODO */\nexport interface User {\n  id?: string;\n  ip_address?: string;\n  email?: string;\n  username?: string;\n  extra?: { [key: string]: any };\n}\n\n/** TODO */\nexport interface SdkInfo {\n  name: string;\n  version: string;\n  integrations?: string[];\n  packages?: Package[];\n}\n\n/** TODO */\nexport interface Package {\n  name: string;\n  version: string;\n}\n\n/** TODO */\nexport interface StackFrame {\n  filename?: string;\n  function?: string;\n  module?: string;\n  platform?: string;\n  lineno?: number;\n  colno?: number;\n  abs_path?: string;\n  context_line?: string;\n  pre_context?: string[];\n  post_context?: string[];\n  in_app?: boolean;\n  vars?: { [key: string]: any };\n}\n\n/** TODO */\nexport interface Stacktrace {\n  frames?: StackFrame[];\n  frames_omitted?: [number, number];\n}\n\n/** TODO */\nexport interface Thread {\n  id?: number;\n  name?: string;\n  stacktrace?: Stacktrace;\n  crashed?: boolean;\n  current?: boolean;\n}\n\n/** TODO */\nexport interface SentryException {\n  type?: string;\n  value?: string;\n  module?: string;\n  thread_id?: number;\n  stacktrace?: Stacktrace;\n}\n\n/** TODO */\nexport interface Request {\n  url?: string;\n  method?: string;\n  data?: any;\n  query_string?: string;\n  cookies?: { [key: string]: string };\n  env?: { [key: string]: string };\n  headers?: { [key: string]: string };\n}\n\n/** TODO */\nexport interface SentryEvent {\n  event_id?: string;\n  message?: string;\n  timestamp?: number;\n  level?: Severity;\n  platform?: string;\n  logger?: string;\n  server?: string;\n  release?: string;\n  dist?: string;\n  environment?: string;\n  sdk?: SdkInfo;\n  request?: Request;\n  transaction?: string;\n  modules?: { [key: string]: string };\n  fingerprint?: string[];\n  exception?: {\n    values: SentryException[];\n  };\n  stacktrace?: Stacktrace;\n  breadcrumbs?: Breadcrumb[];\n  contexts?: { [key: string]: object };\n  tags?: { [key: string]: string };\n  extra?: { [key: string]: any };\n  user?: User;\n}\n\n/** TODO */\nexport interface Integration {\n  name: string;\n  handler?: any;\n  install(): void;\n}\n\n/** TODO */\nexport interface SentryResponse {\n  status: Status;\n}\n\n/** TODO */\nexport interface TransportOptions {\n  dsn: DSNLike;\n  /** Define custom headers */\n  headers?: object;\n}\n\n/** TODO */\nexport interface Transport {\n  send(event: SentryEvent): Promise<SentryResponse>;\n}\n\n/** TODO */\nexport interface TransportClass<T extends Transport> {\n  new (options: TransportOptions): T;\n}\n\n/** The status of an event. */\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n"]}