{"version":3,"file":"PromptForParameters.js","sourceRoot":"","sources":["../../../lib/Steps/PromptForParameters.ts"],"names":[],"mappings":"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","sourcesContent":["import { Answers, prompt, Question } from 'inquirer';\nimport * as _ from 'lodash';\nimport { isNull } from 'util';\nimport { dim } from '../Helper/Logging';\nimport { getCurrentIntegration } from '../Helper/Wizard';\nimport { BaseStep } from './BaseStep';\n\nexport class PromptForParameters extends BaseStep {\n  public async emit(answers: Answers): Promise<Answers> {\n    this.debug(answers);\n    if (!await getCurrentIntegration(answers).shouldEmit(answers)) {\n      return {};\n    }\n    if (this.argv.quiet) {\n      return {};\n    }\n\n    let url = this.getFullUrl(answers);\n    const organization = await prompt([\n      {\n        message: 'Organization Slug:',\n        name: 'slug',\n        type: 'input',\n        validate: this.validateSlug,\n        when: this.shouldAsk(answers, 'config.organization.slug', () => {\n          dim('Please copy/paste your organization slug');\n          dim(`It can be found in the url ${url}`);\n        }),\n      },\n    ]);\n\n    url = this.getFullUrl(answers, organization.slug);\n    const project = await prompt([\n      {\n        message: 'Project Slug:',\n        name: 'slug',\n        type: 'input',\n        validate: this.validateSlug,\n        when: this.shouldAsk(answers, 'config.project.slug', () => {\n          dim('Please copy/paste your project slug');\n          dim(`It can be found in the url ${url}`);\n        }),\n      },\n    ]);\n\n    url = this.getFullUrl(answers, organization.slug, project.slug);\n    const dsn = await prompt([\n      {\n        message: 'DSN:',\n        name: 'secret',\n        type: 'input',\n        validate: this.validateDSN,\n        when: this.shouldAsk(answers, 'config.dsn.secret', () => {\n          dim('Please copy/paste your DSN');\n          dim(`It can be found here: ${url}`);\n        }),\n      },\n    ]);\n\n    const auth = await prompt([\n      {\n        message: 'Auth Token:',\n        name: 'token',\n        type: 'input',\n        validate: this.validateAuthToken,\n        when: this.shouldAsk(answers, 'config.auth.token', () => {\n          dim('Please copy/paste your auth token');\n          dim(`It can be found here: ${this.argv.url}api/`);\n          dim('In case there is none yet, create one with [project:releases] permission');\n        }),\n      },\n    ]);\n\n    return {\n      config: _.merge(_.get(answers, 'config'), { auth, dsn, project, organization }),\n    };\n  }\n\n  private getFullUrl(\n    answers: Answers,\n    organizationSlug?: string,\n    projectSlug?: string\n  ): string {\n    const baseUrl = this.argv.url;\n    const orgSlug = _.get(\n      answers,\n      'config.organization.slug',\n      organizationSlug || 'organization_slug'\n    );\n    const projSlug = _.get(answers, 'config.project.slug', projectSlug || 'project_slug');\n    return `${baseUrl}${orgSlug}/${projSlug}`;\n  }\n\n  private shouldAsk(answers: Answers, configKey: string, preHook?: () => void): boolean {\n    const shouldAsk = isNull(_.get(answers, configKey, null));\n    if (shouldAsk && preHook) {\n      preHook();\n    }\n    return shouldAsk;\n  }\n\n  private validateAuthToken(input: string): boolean | string {\n    if (!input.match(/[0-9a-f]{64}/g)) {\n      return 'Make sure you copied the correct auth token, it should be 64 hex chars';\n    }\n    return true;\n  }\n\n  private validateSlug(input: string): boolean | string {\n    if (input.match(/[A-Z]/g)) {\n      return 'Please copy the slug from the url, it should be all lowercase';\n    }\n    if (input.length === 0) {\n      return 'Can\\'t be empty';\n    }\n    return true;\n  }\n\n  private validateDSN(input: string): boolean | string {\n    const match = input.match(\n      /^(?:(\\w+):)?\\/\\/(?:(\\w+)(:\\w+)?@)?([\\w\\.-]+)(?::(\\d+))?(\\/.*)$/\n    );\n    if (!match) {\n      return 'Invalid DSN format';\n    }\n    if (match[1] !== 'http' && match[1] !== 'https') {\n      return 'Unsupported protocol for DSN: ' + match[1];\n    }\n    return true;\n  }\n}\n"]}