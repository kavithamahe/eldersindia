{"version":3,"file":"ChooseIntegration.js","sourceRoot":"","sources":["../../../lib/Steps/ChooseIntegration.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAqD;AACrD,0BAA4B;AAC5B,0CAAkE;AAElE,uCAAsC;AACtC,kDAAiD;AACjD,oDAAmD;AACnD,sEAAqE;AACrE,0DAAyD;AACzD,0DAAyD;AAEzD,IAAI,cAAc,GAAQ,EAAE,CAAC;AAE7B,IAAI,CAAC;IACH,qCAAqC;IACrC,cAAc,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACjD,CAAC;AAAC,KAAK,CAAC,CAAC,IAAD,CAAC;IACP,cAAc,GAAG,OAAO,CAAI,OAAO,CAAC,GAAG,EAAE,kBAAe,CAAC,CAAC;AAC5D,CAAC;AAED;IAAuC,qCAAQ;IAA/C;;IAqDA,CAAC;IApDc,gCAAI,GAAjB,UAAkB,OAAgB;;;;;;wBAE5B,iBAAiB,GAAG,IAAI,CAAC;6BACzB,IAAI,CAAC,IAAI,CAAC,WAAW,EAArB,wBAAqB;wBACvB,iBAAiB,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;;;wBAE3D,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BACpB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;wBACtD,CAAC;wBACD,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;wBAC/B,qBAAM,iBAAM,CAAC;gCAC/B;oCACE,OAAO,EAAE,iCAAqB,EAAE;oCAChC,OAAO,EAAE,iBAAiB;oCAC1B,OAAO,EAAE,yCAAyC;oCAClD,IAAI,EAAE,aAAa;oCACnB,IAAI,EAAE,MAAM;iCACb;6BACF,CAAC,EAAA;;wBARF,iBAAiB,GAAG,SAQlB,CAAC;;;wBAGD,WAAW,GAAG,IAAI,CAAC;wBACvB,MAAM,CAAC,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;4BACtC,KAAK,uBAAW,CAAC,WAAW;gCAC1B,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACzC,KAAK,CAAC;4BACR,KAAK,uBAAW,CAAC,OAAO;gCACtB,WAAW,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACrC,KAAK,CAAC;4BACR,KAAK,uBAAW,CAAC,IAAI;gCACnB,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACzC,KAAK,CAAC;4BACR,KAAK,uBAAW,CAAC,QAAQ;gCACvB,WAAW,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCACtC,KAAK,CAAC;4BACR;gCACE,WAAW,GAAG,IAAI,qCAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCAC/C,KAAK,CAAC;wBACV,CAAC;wBAED,sBAAO,EAAE,WAAW,aAAA,EAAE,EAAC;;;;KACxB;IAEM,mDAAuB,GAA9B;QACE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,2BAA2B,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,uBAAW,CAAC,WAAW,CAAC;QACjC,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,uBAAW,CAAC,OAAO,CAAC;QAC7B,CAAC;QACD,MAAM,CAAC;IACT,CAAC;IACH,wBAAC;AAAD,CAAC,AArDD,CAAuC,mBAAQ,GAqD9C;AArDY,8CAAiB","sourcesContent":["import { Answers, prompt, Question } from 'inquirer';\nimport * as _ from 'lodash';\nimport { getIntegrationChoices, Integration } from '../Constants';\nimport { dim, green } from '../Helper/Logging';\nimport { BaseStep } from './BaseStep';\nimport { Cordova } from './Integrations/Cordova';\nimport { Electron } from './Integrations/Electron';\nimport { GenericJavascript } from './Integrations/GenericJavascript';\nimport { GenericNode } from './Integrations/GenericNode';\nimport { ReactNative } from './Integrations/ReactNative';\n\nlet projectPackage: any = {};\n\ntry {\n  // If we run directly in setup-wizard\n  projectPackage = require('../../package.json');\n} catch {\n  projectPackage = require(`${process.cwd()}/package.json`);\n}\n\nexport class ChooseIntegration extends BaseStep {\n  public async emit(answers: Answers): Promise<Answers> {\n    // If we receive project type as an arg we skip asking\n    let integrationPrompt = null;\n    if (this.argv.integration) {\n      integrationPrompt = { integration: this.argv.integration };\n    } else {\n      if (this.argv.quiet) {\n        throw new Error('You need to choose a integration');\n      }\n      integrationPrompt = this.tryDetectingIntegration();\n      integrationPrompt = await prompt([\n        {\n          choices: getIntegrationChoices(),\n          default: integrationPrompt,\n          message: 'What integration do you want to set up?',\n          name: 'integration',\n          type: 'list',\n        },\n      ]);\n    }\n\n    let integration = null;\n    switch (integrationPrompt.integration) {\n      case Integration.reactNative:\n        integration = new ReactNative(this.argv);\n        break;\n      case Integration.cordova:\n        integration = new Cordova(this.argv);\n        break;\n      case Integration.node:\n        integration = new GenericNode(this.argv);\n        break;\n      case Integration.electron:\n        integration = new Electron(this.argv);\n        break;\n      default:\n        integration = new GenericJavascript(this.argv);\n        break;\n    }\n\n    return { integration };\n  }\n\n  public tryDetectingIntegration(): Integration | undefined {\n    if (_.has(projectPackage, 'dependencies.react-native')) {\n      return Integration.reactNative;\n    }\n    if (_.has(projectPackage, 'dependencies.cordova')) {\n      return Integration.cordova;\n    }\n    return;\n  }\n}\n"]}