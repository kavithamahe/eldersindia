{"version":3,"file":"hub.js","sourceRoot":"","sources":["../src/hub.ts"],"names":[],"mappings":"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","sourcesContent":["import { Breadcrumb, SentryEvent } from '@sentry/types';\nimport { Layer } from './interfaces';\nimport { Scope } from './scope';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be incresed when the global interface\n * changes a and new methods are introduced.\n */\nexport const API_VERSION = 2;\n\n/**\n * Internal class used to make sure we always have the latest internal functions\n * working in case we have a version conflict.\n */\nexport class Hub {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly stack: Layer[] = [];\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: any, scope: Scope = new Scope(), private readonly version: number = API_VERSION) {\n    this.stack.push({ client, scope });\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client/client.\n   * @param args Arguments to pass to the client/frontend.\n   */\n  private invokeClient(method: string, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      top.client[method](...args, top.scope);\n    }\n  }\n\n  /**\n   * Internal helper function to call an async method on the top client if it\n   * exists.\n   *\n   * @param method The method to call on the client/client.\n   * @param args Arguments to pass to the client/frontend.\n   */\n  private invokeClientAsync(method: string, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      top.client[method](...args, top.scope).catch((err: any) => {\n        console.error(err);\n      });\n    }\n  }\n\n  /**\n   * Checks if this hub's version is older than the given version.\n   *\n   * @param version A version number to compare to.\n   * @return True if the given version is newer; otherwise false.\n   */\n  public isOlderThan(version: number): boolean {\n    return this.version < version;\n  }\n\n  /**\n   * This binds the given client to the current scope.\n   * @param client An SDK client (client) instance.\n   */\n  public bindClient(client?: any): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (top && top.scope && client) {\n      top.scope.addScopeListener((s: Scope) => {\n        if (client.getBackend) {\n          try {\n            client.getBackend().storeScope(s);\n          } catch {\n            // Do nothing\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Create a new scope to store context information.\n   *\n   * The scope will be layered on top of the current one. It is isolated, i.e. all\n   * breadcrumbs and context information added to this scope will be removed once\n   * the scope ends. Be sure to always remove this scope with {@link this.popScope}\n   * when the operation finishes or throws.\n   */\n  public pushScope(): void {\n    // We want to clone the content of prev scope\n    const stack = this.getStack();\n    const parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;\n    this.getStack().push({\n      client: this.getClient(),\n      scope: Scope.clone(parentScope),\n    });\n  }\n\n  /**\n   * Removes a previously pushed scope from the stack.\n   *\n   * This restores the state before the scope was pushed. All breadcrumbs and\n   * context information added since the last call to {@link this.pushScope} are\n   * discarded.\n   */\n  public popScope(): boolean {\n    return this.getStack().pop() !== undefined;\n  }\n\n  /**\n   * Creates a new scope with and executes the given operation within.\n   * The scope is automatically removed once the operation\n   * finishes or throws.\n   *\n   * This is essentially a convenience function for:\n   *\n   *     pushScope();\n   *     callback();\n   *     popScope();\n   *\n   * @param callback that will be enclosed into push/popScope.\n   */\n  public withScope(callback: (() => void)): void {\n    this.pushScope();\n    try {\n      callback();\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /** Returns the client of the top stack. */\n  public getClient(): any | undefined {\n    return this.getStackTop().client;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this.stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this.stack[this.stack.length - 1];\n  }\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * @param exception An exception-like object.\n   */\n  public captureException(exception: any): void {\n    this.invokeClientAsync('captureException', exception);\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * @param message The message to send to Sentry.\n   */\n  public captureMessage(message: string): void {\n    this.invokeClientAsync('captureMessage', message);\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * @param event The event to send to Sentry.\n   */\n  public captureEvent(event: SentryEvent): void {\n    this.invokeClientAsync('captureEvent', event);\n  }\n\n  /**\n   * Records a new breadcrumb which will be attached to future events.\n   *\n   * Breadcrumbs will be added to subsequent events to provide more context on\n   * user's actions prior to an error or crash.\n   *\n   * @param breadcrumb The breadcrumb to record.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb): void {\n    this.invokeClient('addBreadcrumb', breadcrumb);\n  }\n\n  /**\n   * Callback to set context information onto the scope.\n   *\n   * @param callback Callback function that receives Scope.\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const top = this.getStackTop();\n    if (top.client && top.scope) {\n      // TODO: freeze flag\n      callback(top.scope);\n    }\n  }\n\n  /**\n   * This will be called to receive the event\n   * @param callback will only be called if there is a bound client\n   */\n  public addEventProcessor(callback: (event: SentryEvent) => Promise<SentryEvent | null>): void {\n    const top = this.getStackTop();\n    if (top.scope && top.client) {\n      top.scope.addEventProcessor(callback);\n    }\n  }\n}\n"]}