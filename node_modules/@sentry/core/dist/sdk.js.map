{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mCAA4C;AAS5C;;;;;;;GAOG;AACH,qBACE,WAA8B,EAC9B,OAAU,EACV,mBAAuC;IAAvC,oCAAA,EAAA,wBAAuC;IAEvC,IAAI,mBAAa,EAAE,CAAC,SAAS,EAAE,EAAE;QAC/B,OAAO;KACR;IAED,IAAM,MAAM,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;IACxC,MAAM,CAAC,OAAO,EAAE,CAAC;IAEjB,gFAAgF;IAChF,iDAAiD;IACjD,mBAAa,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAEnC,IAAI,YAAY,YAAO,mBAAmB,CAAC,CAAC;IAC5C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QACvC,YAAY,YAAO,YAAY,EAAK,OAAO,CAAC,YAAY,CAAC,CAAC;KAC3D;SAAM,IAAI,OAAO,OAAO,CAAC,YAAY,KAAK,UAAU,EAAE;QACrD,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;KACnD;IAED,2EAA2E;IAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QAC/B,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;YAC9B,WAAW,CAAC,OAAO,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;KACJ;AACH,CAAC;AA7BD,kCA6BC","sourcesContent":["import { getDefaultHub } from '@sentry/hub';\nimport { Integration } from '@sentry/types';\nimport { Client, Options } from './interfaces';\n\n/** A class object that can instanciate Client objects. */\nexport interface ClientClass<F extends Client, O extends Options> {\n  new (options: O): F;\n}\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n * @returns The installed and bound client instance.\n */\nexport function initAndBind<F extends Client, O extends Options>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n  defaultIntegrations: Integration[] = [],\n): void {\n  if (getDefaultHub().getClient()) {\n    return;\n  }\n\n  const client = new clientClass(options);\n  client.install();\n\n  // This should happen here if any integration uses {@link Hub.addEventProcessor}\n  // there needs to be a client on the hub already.\n  getDefaultHub().bindClient(client);\n\n  let integrations = [...defaultIntegrations];\n  if (Array.isArray(options.integrations)) {\n    integrations = [...integrations, ...options.integrations];\n  } else if (typeof options.integrations === 'function') {\n    integrations = options.integrations(integrations);\n  }\n\n  // Just in case someone will return non-array from a `itegrations` callback\n  if (Array.isArray(integrations)) {\n    integrations.forEach(integration => {\n      integration.install();\n    });\n  }\n}\n"]}